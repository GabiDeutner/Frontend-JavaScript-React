>>> Tratando erros com catch

O método then(), em português, significa "então". 
Ele pega a requisição, e aquele valor, ele faz alguma operação com ele. 
Faz alguma coisa com a resposta retornada. Mas ele só faz se aquela promessa foi resolvida.

O que acontece se der algum erro e aquela promessa for rejeitada? 
Por enquanto, não acontece nada. Vamos precisar aprender outro método para imprimir isso na tela. 
Vamos colocar .catch() no código. Exemplo:

var consultaCEP = fetch('https://viacep.com.br/ws/01001000/json/')
    .then(resposta => resposta.json())
    .then(r => console.log(r))
    .catch(erro => console.log(erro));

Toda Promise retorna dois métodos:
> then se ela for resolvida
> catch se ela for recusada

Então, vamos colocar catch(erro => );, que é outra arrow function, 
console.log(erro): catch(erro => console.log(erro));

Ainda não vai cair no catch porque o nosso CEP está digitado corretamente.
Eu vou tirar um zero do link do fetch para "forçar" um erro. 

Exemplo:

var consultaCEP = fetch('https://viacep.com.br/ws/0100100/json/')
    .then(resposta => resposta.json())
    .then(r => console.log(r))
    .catch(erro => console.log(erro));

Os erros que aparecerão em vermelho que irão resultar são erros do navegador. 
A mensagem de erro é diferente para cada navegador porque não é o erro que estamos tratando.


O erro TypeError: failed to fetch, é aquilo que mandamos imprimir no console.log, através do catch. 
E toda promise retorna esses dois métodos. 
Ela retorna o then, caso ela for resolvida. E retorna o catch, caso ela seja recusada.

Catch em português significa "pegue". 
Assim, caso aconteça algum erro, ele pega o erro e imprime na tela. 

O erro TypeError: failed to fetch. 
É importante tratar esse erro.

Exemplo:

var consultaCEP = fetch('https://viacep.com.br/ws/01001000/json/')
	.then(resposta => resposta.json())
	.then(r => {
		if (r.erro){
			throw Error('Esse cep não existe!')
		} else
		console.log(r)})
	.catch(erro => console.log(erro));

	console.log(consultaCEP);



Então eu vou colocar no fetch o0 CEP como 01001250 (CEP que não existe).
Agora ele deu esse erro de que o CEP não existe. 
O tratamento do (r.erro) foi realizado justamente por isso.
Ao ler a documentação do viaCEP, quando ele fala da validação do CEP, ele nos explica como lidar com erros.
Então, quando consultado um CEP de formato inválido, por exemplo, nove dígitos, alfa numérico, espaço, 
o código de retorno da consulta é 400. Ele puxa o erro direto. Ele vai dar a promessa rejeitada e vai 
cair naquele console.log do catch que fizemos.

Mas se você reparar, nenhum desses casos, é: caso o CEP não exista. 
No segundo parágrafo da documentação, ele explica como funciona, como ele faz esse tratamento de erro.
Ele explica que, quando consultado um CEP de formato válido, porém inexistente, o retorno encontrará 
um valor de erro igual a true. Por isso que tratamos desse jeito no código. 
Então, para CEPs que não existem, ele não vai voltar reject, ele não vai no catch, mas no then. 
E para pegarmos esse erro, temos que fazer essa condicional com throw Error.

Se o retorno foi um erro igual a true, não precisamos informar que é true. 
Eu só coloquei (r.erro), ele vai imprimir um erro chamado de "Esse cep não existe!". 
E o catch vai pegar aquele erro que eu coloquei. 
E caso não esteja incorreto, ele vai continuar, vai dar o else console.log(r) e imprimir sem mandar 
erro nenhum.

Quando conseguimos outras maneiras de exibir erros, podemos colocar no throw Error. 
Desta maneira, faz ainda mais sentido usar o catch, porque ele pega esse erro.

E com os outros condicionais, podemos dar um jeito de imprimir mensagens customizadas direto no catch, 
sem ser esse caso do "CEP não existe", que ele passa como Resolve. 
É possível fazer algumas mensagens customizadas a partir do throw Error, 
ou só mudando no console.log e fazendo uma condicional lidando com o que está vindo errado.