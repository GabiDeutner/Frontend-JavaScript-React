Arquitetura das pastas - ITCSS

Styled Components

ITCSS = Triângulo Invertido de seis camadas (folders)

> Base : Components

> Evitar com que as camadas de cima consumam as camadas de baixo
o pico não deve consumir a de baixo, por exemplo

> Nessa arquitetura, as camadas de baixo consomem as de cima

> Pico: Settings - dentro dessa camada existem as variáveis (configurações)
Essas variáveis são utilizadas pelos outros nívels - exemplo as cores do projeto

> Tools: camada abaixo do pico, nela estão as functions
exemplo: functions que centraliza elementos

> Generic: camada abaixo de tools
Exemplo de arquivo: reset.css - reseta as estilizações que são default do navegador
Os arquivos dessa camada possuem apenas seletores de tags

> Base / Elements: propósito de definir o que é padrão no projeto
Ou seja, garante que o site esteja padronizado em todos os browsers
Garante que o que é comum para a tag sempre seja assim, então padroniza as tags para todos os browsers
Elements costuma ser o nome mais utilizado para essa camada, mas em alguns lugares eles chamam de Base também

> Objects: propósito de criar elementos genéricos
Devem ser objetos que podem ser utilizados várias vezes em lugares diferentes, por isso são genéricos
Exemplo: arquivo title
Os arquivos possuem seletores de class

> Components (base): são objetos genéricos também, porém mais limitados que os da camada de objects
Possuem apenas seletores de class



1. Settings (pico - variáveis. Exemplo: colors.js)
2. Tools (functions. Exemplo: base.js)
3. Generic (arquivos com seletores de tags. Exemplo: reset.css)
4. Base / Elements (arquivos que padronizam as tags em todos os browsers)
5. Objects (cria elementos)
6. Components (base)



>>>> Revisão:

Na arquitetura ITCSS (Inverted Triangle CSS), a pasta "elements" não é uma pasta específica ou um 
conceito diretamente relacionado ao React. Em vez disso, a estrutura da ITCSS organiza o código CSS 
em camadas, com as camadas mais abstratas no topo (como os estilos gerais e base) e as camadas mais 
específicas na parte inferior (como os estilos do componente).

No contexto do React, a organização da ITCSS pode ser aplicada às pastas e à estrutura de arquivos 
que contêm estilos CSS relacionados aos componentes React. Aqui está uma descrição geral das camadas 
da ITCSS e como você pode aplicá-las a um projeto React:

Settings: Esta camada contém variáveis e configurações globais, como cores, tamanhos de fonte, 
espaçamentos, etc. No React, você pode criar um arquivo de constantes ou variáveis globais para 
armazenar essas informações.

Tools: Aqui, você definirá funções e mixins que serão usados para gerar estilos. No contexto do React, 
isso pode incluir funções JavaScript que calculam estilos com base em variáveis ou props do componente.

Generic: Esta camada inclui estilos globais que afetam todo o projeto. Isso pode incluir redefinições 
CSS, estilos padrão para tags HTML (como body e a), e outras regras globais.

Elements: A camada "elements" geralmente contém estilos para estilizar elementos HTML de forma bruta, 
sem classes ou identificadores específicos. Isso pode incluir estilos para tags HTML como p, h1, a, etc. 
No React, você pode aplicar esses estilos diretamente aos elementos HTML dentro dos componentes ou criar 
componentes de estilo básico que encapsulam esses estilos.

Objects: Os "objetos" são padrões de design reutilizáveis, como grid systems ou layout containers. 
Você pode criar componentes React que representam esses objetos e aplicar estilos a eles.

Components: Esta é a camada mais específica, onde você estiliza componentes React individuais. 
Cada componente terá seu próprio arquivo de estilos nesta camada.

Utilities: Por fim, esta camada contém utilitários, como classes de utilidade para ajustar rapidamente 
margens, preenchimentos, tamanhos de texto, etc.

Portanto, a pasta "elements" na ITCSS seria a camada onde você colocaria estilos para elementos HTML 
genéricos, mas no contexto do React, você pode optar por aplicar esses estilos diretamente aos elementos 
HTML dentro de seus componentes ou criar componentes de estilo genérico que encapsulam esses estilos. 
O React oferece flexibilidade para organizar seus estilos de acordo com as necessidades do seu projeto.

