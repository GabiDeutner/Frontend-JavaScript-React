Flexbox Parte 2

Estilizando os elementos filhos

>>> Propriedade Order

> É a habilidade dos itens para se ordenarem
> Propriedade order: muda a ordem dos elementos
> o Padrão para todos os elementos é o "order: 0;"
> Com todos os elementos em "order: 0;" eles seguem exatamente a ordem do HTML

> Se você tem um elemento A com "order: 1;" e um elemento B com "order: 0;", o elemento B vem antes do A porque 1 é maior do que 0
a ordem deles ficará:
1° elemento B > 2° elemento A

> Se você tem um elemento A com "order: 1;" um elemento B com "order: 0;" e um elemento C com "order: -1;", a ordem deles ficará:
1° elemento C > 2° elemento B > 3° elemento A

> Se você tem um elemento A com "order: 1;" um elemento B com "order: 0;" e um elemento C com "order: 2;", a ordem deles ficará:
1° elemento B > 2° elemento A > 3° elemento C

> Se os elementos tem o mesmo número atribuído a propriedade ordem, o que é levado em conta é a disposição deles no HTML


>>> Propriedade Flex-grow

> É a habilidade dos itens para crescer
> Essa propriedade confere a possibilidade de um item poder ou não crescer de acordo com a necessidade de layout do container
> O Padrão para todos os elementos é o "flex-grow: 0;", ou seja, os elementos não crescem, mantém o tamanho original deles.
> Se um elemento está como "flex-grow: 1;" esse elemento vai crescer atingindo todo o espaço disponível naquela linha 
> Se dois elementos estão como "flex-grow: 1;" esses elementos vão crescer no mesmo tamanho atingindo todo o espaço disponível 
naquela linha para que ambos ocupem o maior espaço possível
> Se três elementos estão como "flex-grow: 1;" esses elementos vão crescer no mesmo tamanho atingindo todo o espaço disponível 
naquela linha para que ambos ocupem o maior espaço possível
> Conclusão: Todos os elementos crescem o máximo que puderem igualmente, um não ficará maior do que outro se o número do
flex-grow for igual

> Se dois elementos estão com "flex-grow: 1;" e um elemento está com "flex-grow: 2;", o que está com valor 2 não vai crescer o dobro.
> Isso ocorre porque o "flex-grow" não indica a largura do elemento e sim o que ele irá crescer a partir do tamanho que ele já tem.
> Ou seja, o espaço que o elemento cresce fora o tamanho que ele já tinha antes com "flex-grow: 0;" é proporcional
> Um elemento "flex-grow: 2;" cresce proporcionalmente o dobro do que um elemento "flex-grow: 1;" cresce, mas não terá o dobro do tamanho
> Um elemento "flex-grow: 4;" cresce proporcionalmente quatro vezes mais do que um elemento "flex-grow: 1;" cresce, 
mas não será quatro vezes maior (e assim por diante)
> O "flex-grow" não recebe um número negativo porque ele é um tamanho de proporcionalidade


>>> Propriedade flex-shrink

> É a habilidade dos itens para encolher
> Essa propriedade confere a possibilidade de um item poder ou não encolher de acordo com a necessidade de layout do container
> Para isso, os elementos não podem ter wrap, porque senão em vez de encolher eles vão pular para outro lugar
> A tag container também precisam ter uma largura (width) fixa para dessa largura eles poderem encolher (limite máximo de largura)
> Por padrão todos os elementos sempre terão "flex-shrink: 1;" ou seja, todos eles possuem habilidade de escolher
> Todos os elementos por padrão possuem habilidade de encolher se todos eles atingirem o limite de largura do container
> A lógica do flex-shrink é a mesma que a do flex-grow, as unidades são de proporção, ou seja, o espaço que o elemento
encolhe fora o tamanho que ele já tinha antes com "flex-shrink: 1;" é proporcional
> Ou seja, o "flex-shrink" não indica a largura do elemento e sim o que ele irá encolher a partir do tamanho que ele já tem.
> Um elemento "flex-shrink: 2;" encolhe proporcionalmente duas vezes mais do que um elemento "flex-shrink: 1;", 
mas não terá metade do tamanho. Ele vai encolher duas vezes mais (ter 2x menor tamanho considerando o espaço encolhido).
> Um elemento "flex-shrink: 3;" encolhe proporcionalmente três vezes mais do que um elemento "flex-shrink: 1;",
mas não será três vezes menor (e assim por diante).
> Um elemento "flex-shrink: 0;" nunca irá encolher
> O "flex-shrink" não recebe um número negativo porque ele é um tamanho de proporcionalidade


>>> Propriedade flex-basis

> Essa propriedade define o tamanho dos itens em largura e altura
> Você declara uma height e e uma width no código e coloca "flex-basis: auto;", o "auto" significa
que é para usar a height e width declarada anteriormente sempre
> Se você não definir nenhuma altura e nenhuma largura para os itens, esses itens terão apenas 
o tamanho do conteúdo (vai ocupar exatamente o que ele precisa na página). Os itens serão do tamanho
exato para ter ali o conteúdo aparecendo na página.
> Se você colocar "flex-basis: 0;" em vez de auto sem definir o height e width vai continuar da
mesma forma. Os itens serão do tamanho exato para ter ali o conteúdo aparecendo na página.
> A diferença entre o "flex-basis: auto;" e o "flex-basis: 0;" é que o "flex-basis: 0;" leva apenas
em consideração o tamanho do conteúdo (não leva em consideração o flex grow) e o "flex-basis: auto;"
leva em conta o flex-grow (a proporcionalidade de crescer um pouco o item além do conteúdo).
> É possível alterar o flex-basis para tamanhos expecíficos com unidades de medidas, eles irão
adquirir exatamente esse tamanho (geralmente respeitando a linha, então se você coloca um flex-basis
de 100px por exemplo ele vai ocupar 100px de largura naquela linha do item).


>>> Propriedade flex
> Junção do flex-grow, flex-shrink e flex-basis
> Quando você escrever no CSS: "flex: 0 1 auto;" você quer dizer que:
- flex-grow: 0
- flex-shrink: 1
- flex-basis: auto


>>> Propriedade align-self
> É usando quando apenas um elemento precisa ser alinhado de forma diferente de todos os outros
elementos da página
> Por exemplo, se os elementos da minha página estão como "align-tems: center;" (no centro)
e eu preciso colocar um elemento no topo, eu posso utilizar o "align-self: flex-start;" 
para apenas esse elemento ir para o topo, mantendo os outros elementos ainda alinhados no centro
> A mesma coisa se eu quiser alinhar um único elemento no final enquanto o restante estiver
alinhado de outra forma, basta usar o "align-self: flex-end;" 


vídeo da rafa: https://www.youtube.com/watch?v=hjz6ezV9_uc&list=PLhkO7OMKgT_p3VoB47VHdLGpYTzxYTv8R&index=9
Links importantes:

Cadastro Turing: https://www.turing.com/pt/jobs
Código início do vídeo: https://github.com/rafaballerini/FlexboxParte1
Código final do vídeo: https://github.com/rafaballerini/FlexboxParte2
Guia Flexbox: https://css-tricks.com/snippets/css/a-guide-to-flexbox/
Palavras chave para usar com flex-basis: https://developer.mozilla.org/en-US/docs/Web/CSS/flex-basis
Alguns joguinhos para treinar Flexbox a partir de agora:
https://flexboxfroggy.com/#pt-br
http://www.flexboxdefense.com/?utm_source=gabcodes&utm_medium=Pingback
https://mastery.games/flexboxzombies/?utm_source=gabcodes&utm_medium=Pingback